Spring IOC 容器

1、Spring 的 BeanFactory 容器

    这是一个最简单的容器，它主要的功能是为依赖注入 （DI） 提供支持，
    这个容器接口在 org.springframework.beans.factory.BeanFactor 中被定义。
    BeanFactory 和相关的接口，比如BeanFactoryAware、DisposableBean、InitializingBean，仍旧保留在 Spring 中，
    主要目的是向后兼容已经存在的和那些 Spring 整合在一起的第三方框架。

    在 Spring 中，有大量对 BeanFactory 接口的实现。其中，最常被使用的是 XmlBeanFactory 类。
    这个容器从一个 XML 文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。

    在资源宝贵的移动设备或者基于 applet 的应用当中， BeanFactory 会被优先选择。
    否则，一般使用的是 ApplicationContext，除非你有更好的理由选择 BeanFactory。

    1.1 创建一个JavaEE 项目

    1.2 在项目的web/WEB-INF目录下新建目录classes 和 lib,将spring相关的jar包和commons logging的jar包复制到lib文件下。

    1.3 配置输出路径为/classes， 依赖路径为/lib

    1.4 在src目录下新建一个package(com.tutorialspoint)和一个spring XML配置文件(Beans.xml)。

    1.5 在com.tutotialspoint包里创建两个测试类HelloWorld.java 和 MainApp.java

    1.6 编写好测试代码并配置好Beans.xml,然后运行

    1.7 在主程序当中，我们需要注意以下两点：

        1）第一步利用框架提供的 XmlBeanFactory() API 去生成工厂 bean 以及利用 ClassPathResource() API 去加载在路径
        CLASSPATH 下可用的 bean 配置文件。XmlBeanFactory() API 负责创建并初始化所有的对象，即在配置文件中提到的 bean。

        2）第二步利用第一步生成的 bean 工厂对象的 getBean() 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID
        来返回一个真正的对象，该对象最后可以用于实际的对象。一旦得到这个对象，你就可以利用这个对象来调用任何方法。

2、Spring ApplicationContext 容器

    2.1 Spring ApplicationContext 容器

        Application Context 是 BeanFactory 的子接口，也被称为 Spring 上下文。
        Application Context 是 spring 中较高级的容器。和 BeanFactory 类似，它可以加载配置文件中定义的 bean，
        将所有的 bean 集中在一起，当有请求的时候分配 bean。 另外，它增加了企业所需要的功能，
        比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。
        这个容器在 org.springframework.context.ApplicationContext interface 接口中定义。

        ApplicationContext 包含 BeanFactory 所有的功能，一般情况下，相对于 BeanFactory，ApplicationContext 会更加优秀。
        当然，BeanFactory 仍可以在轻量级应用中使用，比如移动设备或者基于 applet 的应用程序。

        最常被使用的 ApplicationContext 接口实现：

        FileSystemXmlApplicationContext：该容器从 XML 文件中加载已被定义的 bean。
        在这里，你需要提供给构造器 XML 文件的完整路径。

        ClassPathXmlApplicationContext：该容器从 XML 文件中加载已被定义的 bean。
        在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，
        因为，容器会从 CLASSPATH 中搜索 bean 配置文件。

        WebXmlApplicationContext：该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。

    2.2 编写FileSystemXmlApplicationContext_HelloWorld.java 和 FileSystemXmlApplicationContext_Main.java,
        并配置好Beans.xml文件，然后运行。

    2.3 在主程序当中，我们需要注意以下两点：

        1）第一步生成工厂对象。加载完指定路径下 bean 配置文件后，利用框架提供的 FileSystemXmlApplicationContext API
           去生成工厂 bean。FileSystemXmlApplicationContext 负责生成和初始化所有的对象，比如，所有在 XML bean 配置文件
           中的 bean。

        2）第二步利用第一步生成的上下文中的 getBean() 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID 来返回
           一个真正的对象。一旦得到这个对象，就可以利用这个对象来调用任何方法。

3、Bean 定义

    3.1 被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC
        容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的，例如，已经在先前章节看到的，在 XML 的表单中的 定义。

    3.2 bean 定义包含称为配置元数据的信息，下述容器也需要知道配置元数据：

        1）如何创建一个 bean

        2）bean 的生命周期的详细信息

        3）bean 的依赖关系

    3.3 上述所有的配置元数据转换成一组构成每个 bean 定义的下列属性。

    属性	描述
    class	这个属性是强制性的，并且指定用来创建 bean 的 bean 类。
    name	这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。
    scope	这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。
    constructor-arg	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
    properties	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
    autowiring mode	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
    lazy-initialization mode	延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。
    initialization 方法	在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。
    destruction 方法	当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。
    Bean 与 Spring 容器的关系

    3.4 下图表达了Bean 与 Spring 容器之间的关系：（见文件中的图片）

    3.5 Spring 配置元数据

        Spring IoC 容器完全由实际编写的配置元数据的格式解耦。有下面三个重要的方法把配置元数据提供给 Spring 容器：

        1）基于 XML 的配置文件

        2）基于注解的配置

        3）基于 Java 的配置

4、Spring Bean 作用域

    4.1 Bean 的作用域

    当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的
     bean 实例，你应该声明 bean 的作用域的属性为 prototype。同理，如果你想让 Spring 在每次需要时都返回同一个bean实例，
     你应该声明 bean 的作用域的属性为 singleton。

    Spring 框架支持以下五个作用域，分别为singleton、prototype、request、session和global session，5种作用域说明如下所示，

    注意，如果你使用 web-aware ApplicationContext 时，其中三个是可用的。

    作用域	                            描述
    singleton	在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值
    prototype	每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()
    request	    每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境
    session	    同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境
    global-session	一般用于Portlet应用环境，该运用域仅适用于WebApplicationContext环境
    本章将讨论前两个范围，当我们将讨论有关 web-aware Spring ApplicationContext 时，其余三个将被讨论。

    singleton 作用域：
    singleton 是默认的作用域，也就是说，当定义 Bean 时，如果没有指定作用域配置项，则 Bean 的作用域被默认为 singleton。
    当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean
    定义相匹配，则只会返回bean的同一实例。

    也就是说，当将一个bean定义设置为singleton作用域的时候，Spring IoC容器只会创建该bean定义的唯一实例。

    4.2 Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的
        对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。你可以在 bean 的配置文件中设置作用域的属性为
        singleton。

    4.3 创建Spring_Scope_HelloWorld.java 和 Spring_Scope_Main.java编写代码，配置好Beans.xml运行即可。


5、Spring Bean 生命周期

    5.1 Bean 的生命周期

        理解 Spring bean 的生命周期很容易。当一个 bean 被实例化时，它可能需要执行一些初始化使它转换成可用状态。
        同样，当 bean 不再需要，并且从容器中移除时，可能需要做一些清除工作。

        尽管还有一些在 Bean 实例化和销毁之间发生的活动，但是本章将只讨论两个重要的生命周期回调方法，
        它们在 bean 的初始化和销毁的时候是必需的。

        为了定义安装和拆卸一个 bean，我们只要声明带有 init-method 和/或 destroy-method 参数的 。
        init-method 属性指定一个方法，在实例化 bean 时，立即调用该方法。同样，destroy-method 指定一个方法，
        只有从容器中移除 bean 之后，才能调用该方法。

        Bean的生命周期可以表达为：Bean的定义——Bean的初始化——Bean的使用——Bean的销毁

    5.2 初始化回调

        org.springframework.beans.factory.InitializingBean 接口指定一个单一的方法：

        void afterPropertiesSet() throws Exception;
        因此，你可以简单地实现上述接口和初始化工作可以在 afterPropertiesSet() 方法中执行，如下所示：

        public class ExampleBean implements InitializingBean {
           public void afterPropertiesSet() {
              // do some initialization work
           }
        }
        在基于 XML 的配置元数据的情况下，你可以使用 init-method 属性来指定带有 void 无参数方法的名称。例如：

        <bean id="exampleBean"
                 class="examples.ExampleBean" init-method="init"/>
        下面是类的定义：

        public class ExampleBean {
           public void init() {
              // do some initialization work
           }
        }
        销毁回调
        org.springframework.beans.factory.DisposableBean 接口指定一个单一的方法：

        void destroy() throws Exception;
        因此，你可以简单地实现上述接口并且结束工作可以在 destroy() 方法中执行，如下所示：

        public class ExampleBean implements DisposableBean {
           public void destroy() {
              // do some destruction work
           }
        }
        在基于 XML 的配置元数据的情况下，你可以使用 destroy-method 属性来指定带有 void 无参数方法的名称。例如：

        <bean id="exampleBean"
                 class="examples.ExampleBean" destroy-method="destroy"/>
        下面是类的定义：

        public class ExampleBean {
           public void destroy() {
              // do some destruction work
           }
        }
        如果你在非 web 应用程序环境中使用 Spring 的 IoC 容器；例如在丰富的客户端桌面环境中；
        那么在 JVM 中你要注册关闭 hook。这样做可以确保正常关闭，为了让所有的资源都被释放，
        可以在单个 beans 上调用 destroy 方法。

        建议你不要使用 InitializingBean 或者 DisposableBean 的回调方法，因为 XML 配置在命名方法上提供了极大的灵活性。

    5.3 创建SpringBean_LifeCycle_HelloWorld.java 和 SpringBean_LifeCycle_Main.java编写相应代码并配置好xml文件运行即可。

6、Spring Bean 后置处理器

    6.1 Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理。

    6.2 配置了bean后置处理器后，处理器会在所有bean初始化前后调用postProcessBeforeInitialization和
        postProcessAfterInitializaion方法。

    6.3 创建Spring_BeanPostProcessor_HelloWorld.java和Spring_BeanPostProcessor_InitHelloWorld.java以及
        Spring_BeanPostProcessor_Main.java，编写实现代码，配置好xml文件后运行即可。

    6.4 结果

       对所有的bean初始化前后都调用了BeanPostProcessor接口的postProcessorBeforeInitialization方法和
       postProcessorAfterInitialization方法。

            BeforeInitialization: helloWorld
            AfterInitialization: helloWorld
            BeforeInitialization: fileSystemXmlApplicationContext_HelloWorld
            AfterInitialization: fileSystemXmlApplicationContext_HelloWorld
            BeforeInitialization: Spring_Scope_HelloWorld
            AfterInitialization: Spring_Scope_HelloWorld
            BeforeInitialization: SpringBean_LifeCycle_HelloWorld
            Bean is going through init.
            AfterInitialization: SpringBean_LifeCycle_HelloWorld
            BeforeInitialization: Spring_BeanPostProcessor_HelloWorld
            Bean is going through init.
            AfterInitialization: Spring_BeanPostProcessor_HelloWorld
            Your Message: Hello World!
            Bean will be destroied.
            Bean will be destroied now.