Spring IOC 容器

1、Spring 的 BeanFactory 容器

    这是一个最简单的容器，它主要的功能是为依赖注入 （DI） 提供支持，
    这个容器接口在 org.springframework.beans.factory.BeanFactor 中被定义。
    BeanFactory 和相关的接口，比如BeanFactoryAware、DisposableBean、InitializingBean，仍旧保留在 Spring 中，
    主要目的是向后兼容已经存在的和那些 Spring 整合在一起的第三方框架。

    在 Spring 中，有大量对 BeanFactory 接口的实现。其中，最常被使用的是 XmlBeanFactory 类。
    这个容器从一个 XML 文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。

    在资源宝贵的移动设备或者基于 applet 的应用当中， BeanFactory 会被优先选择。
    否则，一般使用的是 ApplicationContext，除非你有更好的理由选择 BeanFactory。

    1.1 创建一个JavaEE 项目

    1.2 在项目的web/WEB-INF目录下新建目录classes 和 lib,将spring相关的jar包和commons logging的jar包复制到lib文件下。

    1.3 配置输出路径为/classes， 依赖路径为/lib

    1.4 在src目录下新建一个package(com.tutorialspoint)和一个spring XML配置文件(Beans.xml)。

    1.5 在com.tutotialspoint包里创建两个测试类HelloWorld.java 和 MainApp.java

    1.6 编写好测试代码并配置好Beans.xml,然后运行

    1.7 在主程序当中，我们需要注意以下两点：

        1）第一步利用框架提供的 XmlBeanFactory() API 去生成工厂 bean 以及利用 ClassPathResource() API 去加载在路径
        CLASSPATH 下可用的 bean 配置文件。XmlBeanFactory() API 负责创建并初始化所有的对象，即在配置文件中提到的 bean。

        2）第二步利用第一步生成的 bean 工厂对象的 getBean() 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID
        来返回一个真正的对象，该对象最后可以用于实际的对象。一旦得到这个对象，你就可以利用这个对象来调用任何方法。

2、Spring ApplicationContext 容器

    2.1 Spring ApplicationContext 容器

        Application Context 是 BeanFactory 的子接口，也被称为 Spring 上下文。
        Application Context 是 spring 中较高级的容器。和 BeanFactory 类似，它可以加载配置文件中定义的 bean，
        将所有的 bean 集中在一起，当有请求的时候分配 bean。 另外，它增加了企业所需要的功能，
        比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。
        这个容器在 org.springframework.context.ApplicationContext interface 接口中定义。

        ApplicationContext 包含 BeanFactory 所有的功能，一般情况下，相对于 BeanFactory，ApplicationContext 会更加优秀。
        当然，BeanFactory 仍可以在轻量级应用中使用，比如移动设备或者基于 applet 的应用程序。

        最常被使用的 ApplicationContext 接口实现：

        FileSystemXmlApplicationContext：该容器从 XML 文件中加载已被定义的 bean。
        在这里，你需要提供给构造器 XML 文件的完整路径。

        ClassPathXmlApplicationContext：该容器从 XML 文件中加载已被定义的 bean。
        在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，
        因为，容器会从 CLASSPATH 中搜索 bean 配置文件。

        WebXmlApplicationContext：该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。

    2.2 编写FileSystemXmlApplicationContext_HelloWorld.java 和 FileSystemXmlApplicationContext_Main.java,
        并配置好Beans.xml文件，然后运行。

    2.3 在主程序当中，我们需要注意以下两点：

        1）第一步生成工厂对象。加载完指定路径下 bean 配置文件后，利用框架提供的 FileSystemXmlApplicationContext API
           去生成工厂 bean。FileSystemXmlApplicationContext 负责生成和初始化所有的对象，比如，所有在 XML bean 配置文件
           中的 bean。

        2）第二步利用第一步生成的上下文中的 getBean() 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID 来返回
           一个真正的对象。一旦得到这个对象，就可以利用这个对象来调用任何方法。

3、Bean 定义

    3.1 被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC
        容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的，例如，已经在先前章节看到的，在 XML 的表单中的 定义。

    3.2 bean 定义包含称为配置元数据的信息，下述容器也需要知道配置元数据：

        1）如何创建一个 bean

        2）bean 的生命周期的详细信息

        3）bean 的依赖关系

    3.3 上述所有的配置元数据转换成一组构成每个 bean 定义的下列属性。

    属性	描述
    class	这个属性是强制性的，并且指定用来创建 bean 的 bean 类。
    name	这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。
    scope	这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。
    constructor-arg	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
    properties	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
    autowiring mode	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
    lazy-initialization mode	延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。
    initialization 方法	在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。
    destruction 方法	当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。
    Bean 与 Spring 容器的关系

    3.4 下图表达了Bean 与 Spring 容器之间的关系：（见文件中的图片）

    3.5 Spring 配置元数据

        Spring IoC 容器完全由实际编写的配置元数据的格式解耦。有下面三个重要的方法把配置元数据提供给 Spring 容器：

        1）基于 XML 的配置文件

        2）基于注解的配置

        3）基于 Java 的配置